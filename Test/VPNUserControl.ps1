#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 14a8a308-a55a-439f-bc87-78e4578fd086
# Source File: E:\Mes Documents\SAPIEN\PowerShell Studio 2012\Projects\VPN User Control\VPN User Control.pfproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
+wUAAB+LCAAAAAAABACVVE1v2zAMvQ/YfzB8d50gyeIBjoHWaYsc2gVJ1mvBynTrTZYMSd7mfz95
lh35I0N7Ex/JR4LkU3hAwn+hqLagIPr8yXHCveA/kKh/hjafUMiMs2ge+u3TeO4yirttNF9CAItZ
4MFqBd5y8TX1Xkiw9tYBLlfrIE1mwZfQN8Em1dQ4VQVGs9C3TYtcGsOYzgFTFMgIPkKOG9d1bsqM
Jht35kZHBUKVxVWRyqbW/1NjoNR7QFbecZE/F2lqc7W4JkvfTXZP+QvQ50LOLSon5nkOLLn9o5DV
o9u4J1GiGzXR8kqHv7vCFul3iWKqY8v1oaZjzpTgF2kH7g9R37JkitLAI6rGaBbe3YO5RyA/4RVF
G3mPDAXQcw8moC5+Bv1J1IA70l2xFdpHH4BlKUoVCwRlBDDCuui4lIrnrd/ivuTYU1CpnkTkad7O
6NyHkh1P17U2zOucyH+jOL4hpa0cF5pgBLZj7U8rPCIpRaYqxx/qu7fSEehPonpPSUnUOPqSw+DD
VU2hW5REZEV/zP4kqlVWAKvsqQ+RmBeVyF7feqsZYzumUDCggwan4W86OdNoPZpBwmVX/SMg67dh
I/1ftrvN5vrHJZ/2j06tT8doVQur0OKZ7EDfkv3Z/wUEDb4P+wUAAA==#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.21
# Generated On: 04/11/2013 16:53
# Generated By: JCU
# Organization: TEST
#========================================================================


#region Source: Startup.pfs
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
kggAAB+LCAAAAAAABADFVt1u2jAUvp/Ud8gDsDhZCJQpjYRCmaqNDjVo6wU3xpxQC8dGtgOK1Ief
YSEkEFSEKqHc5Hzn7/OxfY6DFyBiDTIfYI3Duy+WFfyWdEE5ZkPK4BmnEMYaS52t7FWiAnSi3fls
pT8gFRU8dO1vAaoCO4u+UpDOGAW1kw9IHsa50pDaI8zxAlLg2u5nWqRYG+eWVUR58Gxn+7WsKGM6
k/DAIdMSs5Y1zkxc8hPyiViCMXRniXfvd/Dc67TB8wNUZmrOfMjRvjTHrNvFPvE7bs9rg3Pfe4++
T/9SPhcbNR1RIoUSibafHyfToTRF2gi5nK630T3Hc3vTYsVzxj4kZxdh7aGQqboZ1RqLy4gPJN5Q
vriGsuMlftJNXHfuO9jD11Eu8n9ANlVESEZnn1DZC0piLtnNtnCb/LKde03ZzVi+jn5deLyoBKKF
zGOQa0rgqrvxOQftmEnDAkpx3wCDMSZL0+/kfn0/gIPhWIgHg7LJ7kDUiBbgEym6bc20jpouSxNQ
OpKwa7ChG6ATrLSOMmU68V5fiX1OMWZYJ6ZHhF9N3FIo1S8Zjyf90AlQ8XdwFBuQ8Rswth8bnglw
AhbFQvVqBTGQTFKdW2iP1B2ORtRhHY3oWIp5RvSp9TlFgR9vVRM6AEUkXdXLjBrRSKQrzPNq1Y+R
SKxyM5Dfaltzij1xDdIM7SOCzXDjhP/vcF5lmG0nd51rBQlQ7TWAKqffnIXqG+QfmX54bpIIAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
[void][Reflection.Assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MenuForm_pff) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pfs

#region Source: MenuForm.pff
function Call-MenuForm_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
sh0AAB+LCAAAAAAABADNWV1v4jgUfV9p/0OUZ0QIAQoVRKK0HVXbdtmG6c5DpZVJDPXUsSPHactq
f/za+YCEBHCYMlNVqhrn2r73nuNzb+rhA3TpK2SrS8CB/ftvmjb8k6ElIgBfIwzvgQ/tO0iia8r8
ZrBYDI3S63iSfHqELESU2GazPTTyA8my8+/Q5RpfBXCkO6uQQ7/5NyIefQubcvXkd0OretXQ0qVG
nWZL/jS0SYR5xOCIwIgzgBvaNJpj5P4BVzP6AslofnYGum63Zw6sDmz1B7pGhLMjXQaja+4zwh4T
ZvqEEs4oDvXYS+HnlNEAMr5K7ScYQcId9C/U7Z4lNu60ukMjM9oxSeZFj/N20NThgPEpDREX4en2
RGwGmeMyCMnBuTP4znX7cXqvfQ0h09JQytMKqZ8y5Av0JJ63YA5l5uib2PIZYqw5PPIQ3aTbagow
TZV8kwjjLMfxujPEMdyX6XI818JCpA25jIZ0wTUHkFBzIEOLhmb2At7QQr7CcHRBsVeKsrzcjQ+W
wgNjp8EtdUGS9o7V0CxLYc0E2U2AClMS7ljdbkNr9xXsZ2B+Qzz4rttmT8U8JoHkmnauHeaCkZCh
khqVp1IQlEfhBWAnP5rJTnPA6rFmg6LY2+qro7jeTxnEWADa7XogluViF4ixQ1zAeEU0wLmUgmaz
WQ/D3PG+iDin5ATnW5LtEWDkJXmvhdYFcF+WjEbEO3g8a5zfrtkW2LcHytgXQ1AmwJk8xCoMy+Hf
Ucc/Qq+AcAV7ccYfURgB7EhBlDmdUEyZbs9YVKlJV6+CTZuS5r5sp+CfeHRoxIafhWh/RYgni38G
kiVFoqXMsY33J+WXknnML+mQ6C5+Er824f8It74IGIML+n4iGRMrn4xaReYMVHRgI07CMWXWdDuS
Nq2avFEsYw6ngW5fAxyqNDu5bmTs7pLWX9KPyrZIPu6Hu15TOgiqxFpBZPaRpS/A7FVhubcbzcJT
mpfQxmx3dqjNPt5UtTO7eHBPfe0rRxiFgMOIaedVbCgKgVJPKlePNeHEHek1gtg7ljg3PryjHpRZ
2NWNHyZCv6qlKU+6A++3kCz5s9CaGswpxFeHOdaZFJyazKkUwP3o58ThAQglOFmncZmcoLoY76kG
P6gC7UFffPRaaqctQTONoQ6OA/k9o8aYDY5VhWNP6djRMuxugoNAoK4YR+1G5ZPwbex5n5Bv/Tp0
S0M4Od2UZeYouo2/00j0xIaQarRAP4d1hcfiwzgMoS9YA8PMNh1Z2WmtuwNEwOqLTro5jjj1Y/zy
dFSseZY5X1j9bg94Vq8DpdCsd6re+QPq6n+T86e0Vj+tO6rm/dXs6ZqJxL5R9vL0Kle3WpY5eEoj
9jA+6NyHtwDHuVpsU5Qcv2TgDZHlMS63rEV3cbYwTa/bAhY4zuV0/wPO+qFLGUbzD8isQkoAB78M
Qrm5GnLffPzLvPx2d6tIL8SEuFC2Ep8sr8iFR52NjyHaticVAawfMwEcToW4Cr1jWXxfIIHCx9wH
aGJQuKkSEpwb3Ta9cdM7qUSLK0eFyqIFDPmEwVhgbXNolMbW1pMoFEqcvc+tvevFFAO+EI7a8usr
+3v99iEizmwsC1/612beug/J7tbkAqXBrMwUkzV0oBsxJKpY1hIMixNK93gxP8p3eVlJ9CKXl4y3
xrfti4gYlaOXMHQZCoo5NipHJ9QPAFnZsytnJtKdPuVeByuGls8FTMpjN/LSjQC85Vz1cOUFaFrW
d74Snvmbf34lbuRHhkbhstTI0V6wIH9H+z8S6u1Zsh0AAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Menu = New-Object 'System.Windows.Forms.Form'
	$LabelTitle = New-Object 'System.Windows.Forms.Label'
	$Statusbar = New-Object 'System.Windows.Forms.StatusBar'
	$MenuValidation = New-Object 'System.Windows.Forms.Button'
	$QuitButton = New-Object 'System.Windows.Forms.Button'
	$MenuBox = New-Object 'System.Windows.Forms.GroupBox'
	$LabelUsername = New-Object 'System.Windows.Forms.Label'
	$FieldUsername = New-Object 'System.Windows.Forms.TextBox'
	$DelUser = New-Object 'System.Windows.Forms.RadioButton'
	$AddUser = New-Object 'System.Windows.Forms.RadioButton'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$MenuValidation_Click={
		
		if ($FieldUsername.Text -match "[a-zA-Z]{3,4}"){
			$Global:User = $FieldUsername.Text
			$GetUserLDAPGroup = Get-ADUser -LDAPFilter "(&(objectCategory=person)(sAMAccountName=$User))"
			
			if ($GetUserLDAPGroup.Enabled -eq $true){
				if($AddUser.Checked -eq $true){
					# Vérification Existance clée utilisateur
					If ((Test-Path "HKCU:\Software\SetVPN\$User") -eq $False){
						$Script:NewUser = $true
					}
					Else {
						$Script:NewUser = $false
					}
					$Menu.Close()
					$Menu.Visible = $false
					Call-ControlUserForm_pff
				}
				else{
					$Menu.Close()
					$Menu.Visible = $false
					Call-DelUserForm_pff
				}
			}
			else {
				$Statusbar.Text = "Statut : Erreur l'utilisateur n'existe pas dans l'Active Directory ou le compte est désactivé"
			}
		}
		else {
			$Statusbar.Text = "Statut : Erreur le nom d'utilisateur doit comporter au minimum 3 lettres et au maximum 4"
		}
	}
	$QuitButton_Click={
		$Menu.Close()
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Menu.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MenuForm_FieldUsername = $FieldUsername.Text
		$script:MenuForm_DelUser = $DelUser.Checked
		$script:MenuForm_AddUser = $AddUser.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$MenuValidation.remove_Click($MenuValidation_Click)
			$QuitButton.remove_Click($QuitButton_Click)
			$Menu.remove_Load($Form_StateCorrection_Load)
			$Menu.remove_Closing($Form_StoreValues_Closing)
			$Menu.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# Menu
	#
	$Menu.Controls.Add($LabelTitle)
	$Menu.Controls.Add($Statusbar)
	$Menu.Controls.Add($MenuValidation)
	$Menu.Controls.Add($QuitButton)
	$Menu.Controls.Add($MenuBox)
	$Menu.ClientSize = '630, 405'
	$Menu.Name = "Menu"
	$Menu.StartPosition = 'CenterScreen'
	$Menu.Text = "VPN User Control"
	#
	# LabelTitle
	#
	$LabelTitle.Font = "Microsoft Sans Serif, 16pt, style=Bold"
	$LabelTitle.Location = '43, 33'
	$LabelTitle.Name = "LabelTitle"
	$LabelTitle.Size = '355, 28'
	$LabelTitle.TabIndex = 16
	$LabelTitle.Text = "Menu : VPN User Control"
	#
	# Statusbar
	#
	$Statusbar.Location = '0, 383'
	$Statusbar.Name = "Statusbar"
	$Statusbar.Size = '630, 22'
	$Statusbar.TabIndex = 15
	$Statusbar.Text = "Statut : En attente..."
	#
	# MenuValidation
	#
	$MenuValidation.Location = '512, 329'
	$MenuValidation.Name = "MenuValidation"
	$MenuValidation.Size = '75, 23'
	$MenuValidation.TabIndex = 14
	$MenuValidation.Text = "Suivant"
	$MenuValidation.UseVisualStyleBackColor = $True
	$MenuValidation.add_Click($MenuValidation_Click)
	#
	# QuitButton
	#
	$QuitButton.Location = '43, 330'
	$QuitButton.Name = "QuitButton"
	$QuitButton.Size = '75, 23'
	$QuitButton.TabIndex = 13
	$QuitButton.Text = "Quitter"
	$QuitButton.UseVisualStyleBackColor = $True
	$QuitButton.add_Click($QuitButton_Click)
	#
	# MenuBox
	#
	$MenuBox.Controls.Add($LabelUsername)
	$MenuBox.Controls.Add($FieldUsername)
	$MenuBox.Controls.Add($DelUser)
	$MenuBox.Controls.Add($AddUser)
	$MenuBox.Location = '43, 94'
	$MenuBox.Name = "MenuBox"
	$MenuBox.Size = '545, 203'
	$MenuBox.TabIndex = 12
	$MenuBox.TabStop = $False
	$MenuBox.Text = "Menu Action"
	#
	# LabelUsername
	#
	$LabelUsername.Font = "Microsoft Sans Serif, 9pt"
	$LabelUsername.Location = '85, 63'
	$LabelUsername.Name = "LabelUsername"
	$LabelUsername.Size = '124, 23'
	$LabelUsername.TabIndex = 5
	$LabelUsername.Text = "Nom Utilisateur :"
	#
	# FieldUsername
	#
	$FieldUsername.ImeMode = 'NoControl'
	$FieldUsername.Location = '85, 89'
	$FieldUsername.MaxLength = 4
	$FieldUsername.Name = "FieldUsername"
	$FieldUsername.Size = '137, 20'
	$FieldUsername.TabIndex = 4
	#
	# DelUser
	#
	$DelUser.Location = '298, 135'
	$DelUser.Name = "DelUser"
	$DelUser.Size = '190, 24'
	$DelUser.TabIndex = 2
	$DelUser.TabStop = $True
	$DelUser.Text = "Supprimer"
	$DelUser.UseVisualStyleBackColor = $True
	#
	# AddUser
	#
	$AddUser.Location = '298, 85'
	$AddUser.Name = "AddUser"
	$AddUser.Size = '190, 24'
	$AddUser.TabIndex = 0
	$AddUser.TabStop = $True
	$AddUser.Text = "Ajouter/Modifier"
	$AddUser.UseVisualStyleBackColor = $True
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Menu.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Menu.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Menu.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$Menu.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $Menu.ShowDialog()

}
#endregion Source: MenuForm.pff

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	# Importation des modules
	Import-Module ActiveDirectory
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory { 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	function Get-Days {
		
		if ($CheckLun.Checked -eq $true){
			$Days = $Days + "lun,"
		}
		if ($CheckMar.Checked -eq $true){
			$Days = $Days + "mar,"
		}
		if ($CheckMer.Checked -eq $true){
			$Days = $Days + "mer,"
		}
		if ($CheckJeu.Checked -eq $true){
			$Days = $Days + "jeu,"
		}
		if ($CheckVen.Checked -eq $true){
			$Days = $Days + "ven,"
		}
		
		# Supprime la dernière virgule de Days
		$Days = $Days.Substring(0,$Days.Length-1)
		return $Days
		
	}
	
	# Fonction ReadKey ==========================
	Function ReadKey {
	
	    Param ( 
	        $Key
	    )
	
	    Get-ItemProperty $Key
	}
	
	
	# Fonction CreateKey ========================
	Function CreateKey {
	
	    Param ( 
	        $KeyPath,
	        $KeyName,
	        $KeyValue,
	        $KeyType
	    )
	
	    New-Item -Path $KeyPath -Name $KeyName -Value $KeyValue -ItemType $KeyType -Force
	}
	
	
	# Fonction ModifyKey ========================
	Function ModifyKey {
	
	    Param ( 
	        $KeyPath,
	        $KeyName,
	        $KeyValue
	    )
	
	    Set-ItemProperty -Path $KeyPath -Name $KeyName -Value $KeyValue -Force
	}
	
	
	# Fonction CreateUserDir ====================
	Function CreateUserDir {
	    
	    Param (
	        $User
	    )
	
	    New-Item -Path "HKCU:\Software\SetVPN\" -Name $User -Force
	    New-ItemProperty -Path "HKCU:\Software\SetVPN\$User" -Name "Access" -PropertyType DWord -Value 0 -Force
	    New-ItemProperty -Path "HKCU:\Software\SetVPN\$User" -Name "InitDate" -PropertyType String -Value 0 -Force
	    New-ItemProperty -Path "HKCU:\Software\SetVPN\$User" -Name "TimeSet" -PropertyType DWord -Value 0 -Force
	    New-ItemProperty -Path "HKCU:\Software\SetVPN\$User" -Name "VpnType" -PropertyType DWord -Value 0 -Force
	}
	
	
	# Fonction CompareDate ======================
	Function CompareDate {
	
	    Param (
	        $User
	    )
	
	    $KeyPath = "HKCU:\Software\SetVPN\$User"
	    $UserKey = ReadKey -Key $KeyPath
	
	    $InitDate = Get-Date -Date $($UserKey.InitDate)
	    $ActualDate = Get-Date
	
	    $DiffDates = $ActualDate - $InitDate
	
	    Return $DiffDates.Days
	}
	
	
	# Fonction IsAccess ==========================
	Function IsAccess {
	
	    Param(
	        $KeyPath
	    )
	
	    $UserKey = ReadKey -Key $KeyPath
	
	    If ($($UserKey.Access) -eq 0){
	    
	        $Access = $False
	        #$Msg = "Accès VPN - ERREUR`n"
	    }
	    Else {
	
	        $Access = $true
	        #$Msg = "Accès VPN - OK`n"
	    }
	
	    Return $Access #, $Msg
	}
#endregion Source: Globals.ps1

#region Source: DelUserForm.pff
function Call-DelUserForm_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
2xEAAB+LCAAAAAAABADFWNtu4zYQfS/QfyCEAn1xLdvyJS5kFVklKYImqbHypvtgYEFLo4QNRRoU
layKfkwf+x/7Y6Vujm5Zaw2nQQAjHM5wDmcOOUOZ78HljyDiMyyx9f13CJm/C3JHGKYXhMINDsA6
A/ohBHHBRdDf+r6pNzRSu2R0CyIknFnD/sjUy4Js5c2f4Eok4y0sNCcOJQT9Pwjz+FPYT1bPfnuo
baqH8qUW4/4g+eshO6IyErBgEEmBaQ8tow0l7m8Qr/gDsMVmNsMTdzIdzo0xDE7mGmIK7EIr7UdD
7j2hnlDams2ZFJyGWgpWwV0KvgUh49zMpgSYdMhfoFmj+aiHhiPD1AulF4yS8GjlCO61cCQWcslD
ItVmNctWPkE4rgBge21X8FlqlhNtt4IEINAHSSgJsYRING3PH9XSueEVx14F5qdEYuqpTmGwP33v
Iik5e/UEZm5uMSUeiK+lsBmhK+7iLLDD+biHTmaNuLyUw4rTDlYZUWaTHmqhSUvq8OaSefBZs8Zd
tNNEdwej0npLwghTR8YU3mH3weaUC81aiQja7MvkUMR3H2oB+JQKawTRM4Z058sV3gB9dbqkXk43
PJKHcmVq9NC4SxYzqjw77MyT0WCqXAy/iSidtGs3Av0Ru+6Xf0N0u7xBX/5BPyQHHv3SvB2+OZf/
69m/BhYdmsyRccC5Txy+5qEfdM5lRyTHO/GJw73HvTo4DUMIVDohLHRzSWzl9LjGDN9BoFbrn0aS
B2lunmlidKWJMdz4xslkij1jOgZjYuo7T3XPQehyQcnmCGT8ipdsf0fw8bf98zo/ROtr4goecl/2
b85X6wuhkvTExcP6MVndGBjD+TqPq0fpXnBHP5uHQa1eH52AJ03qm+FNnHeEKfATYXeHIB0Y/sSf
+cOhNxlgAx+INPPfDezHgL5ZSD9eX3WMKBHqcuEidkA8EhcOYu1xYltH0m0DNhfwZmFOnHeDmW9K
VQe1s7cLchVGC/TdsCgx5lJVOFVRRLGzX4GBAliqj5nC7r2albBWaS68dPOHa0W1KlV1jPgQSltA
WsKSpqwh22nbUahqXTFfWvuliSXF0lf3o/VT0uwVg930+4g5q9Okecj/ezbkT+rVeA+UFi/wpB9p
CItKXo2W6YAbCaJ6Cb2QVA0ar/2UHc0Xf9GYeJErG8o1eV2/nqg26RmEriDbapD1VqnNgy1msbU6
d1Yq3vmoNL2NBbm7rySlKbtMHuMM0xq4dnHrZ5K8c3pxSiELnnusDEZZYuqVTyp6ifeKBeWPOf8B
Fu90T9sRAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$DelUserForm = New-Object 'System.Windows.Forms.Form'
	$ButtonValider = New-Object 'System.Windows.Forms.Button'
	$LabelAbout = New-Object 'System.Windows.Forms.Label'
	$ButtonMenu = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$DelUserForm_Load={
		
		# Vérification Existance clée utilisateur
		If ((Test-Path "HKCU:\Software\SetVPN\$User") -eq $False){
			$LabelAbout.Text = "Erreur: $User n'existe pas"
			$ButtonValider.Enabled = $false
		}
	}
	
	$ButtonMenu_Click={
		$DelUserForm.Visible = $false
		Call-MenuForm_pff
	}
	
	$ButtonValider_Click={
		$KeyPath = "HKCU:\Software\SetVPN\$User"
		
		ModifyKey -KeyPath $KeyPath -KeyName Access -KeyValue 0
	    ModifyKey -KeyPath $KeyPath -KeyName Days -KeyValue "none"
	    ModifyKey -KeyPath $KeyPath -KeyName TimeSet -KeyValue 0
	    ModifyKey -KeyPath $KeyPath -KeyName VpnType -KeyValue 0
		
		$DelUserForm.Visible = $false
		Call-EndForm_pff
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$DelUserForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$ButtonValider.remove_Click($ButtonValider_Click)
			$ButtonMenu.remove_Click($ButtonMenu_Click)
			$DelUserForm.remove_Load($DelUserForm_Load)
			$DelUserForm.remove_Load($Form_StateCorrection_Load)
			$DelUserForm.remove_Closing($Form_StoreValues_Closing)
			$DelUserForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# DelUserForm
	#
	$DelUserForm.Controls.Add($ButtonValider)
	$DelUserForm.Controls.Add($LabelAbout)
	$DelUserForm.Controls.Add($ButtonMenu)
	$DelUserForm.ClientSize = '292, 123'
	$DelUserForm.Name = "DelUserForm"
	$DelUserForm.StartPosition = 'CenterScreen'
	$DelUserForm.Text = "Supprimer Utilisateur"
	$DelUserForm.add_Load($DelUserForm_Load)
	#
	# ButtonValider
	#
	$ButtonValider.Location = '194, 87'
	$ButtonValider.Name = "ButtonValider"
	$ButtonValider.Size = '75, 23'
	$ButtonValider.TabIndex = 4
	$ButtonValider.Text = "Valider"
	$ButtonValider.UseVisualStyleBackColor = $True
	$ButtonValider.add_Click($ButtonValider_Click)
	#
	# LabelAbout
	#
	$LabelAbout.Location = '63, 43'
	$LabelAbout.Name = "LabelAbout"
	$LabelAbout.Size = '206, 41'
	$LabelAbout.TabIndex = 1
	$LabelAbout.Text = "Supprimer l'accès VPN à $User ?"
	#
	# ButtonMenu
	#
	$ButtonMenu.Location = '23, 87'
	$ButtonMenu.Name = "ButtonMenu"
	$ButtonMenu.Size = '75, 23'
	$ButtonMenu.TabIndex = 0
	$ButtonMenu.Text = "Menu"
	$ButtonMenu.UseVisualStyleBackColor = $True
	$ButtonMenu.add_Click($ButtonMenu_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $DelUserForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$DelUserForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$DelUserForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$DelUserForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $DelUserForm.ShowDialog()

}
#endregion Source: DelUserForm.pff

#region Source: ControlUserForm.pff
function Call-ControlUserForm_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$ControlUserForm = New-Object 'System.Windows.Forms.Form'
	$ButtonJour = New-Object 'System.Windows.Forms.RadioButton'
	$BoxJour = New-Object 'System.Windows.Forms.GroupBox'
	$CheckMar = New-Object 'System.Windows.Forms.CheckBox'
	$CheckMer = New-Object 'System.Windows.Forms.CheckBox'
	$CheckJeu = New-Object 'System.Windows.Forms.CheckBox'
	$CheckVen = New-Object 'System.Windows.Forms.CheckBox'
	$CheckLun = New-Object 'System.Windows.Forms.CheckBox'
	$LabelFieldJour = New-Object 'System.Windows.Forms.Label'
	$ButtonAccessC2 = New-Object 'System.Windows.Forms.RadioButton'
	$ButtonAccessL2 = New-Object 'System.Windows.Forms.RadioButton'
	$LabelFieldVpnType2 = New-Object 'System.Windows.Forms.Label'
	$BoxCredit = New-Object 'System.Windows.Forms.GroupBox'
	$ButtonAccessC1 = New-Object 'System.Windows.Forms.RadioButton'
	$ButtonAccessL1 = New-Object 'System.Windows.Forms.RadioButton'
	$TextBoxCredit = New-Object 'System.Windows.Forms.TextBox'
	$LabelFieldVpnType1 = New-Object 'System.Windows.Forms.Label'
	$LabelFieldCredit = New-Object 'System.Windows.Forms.Label'
	$ButtonCredit = New-Object 'System.Windows.Forms.RadioButton'
	$LabelAbout = New-Object 'System.Windows.Forms.Label'
	$ButtonValidate = New-Object 'System.Windows.Forms.Button'
	$ButtonMenu = New-Object 'System.Windows.Forms.Button'
	$LabelTitle = New-Object 'System.Windows.Forms.Label'
	$Statusbar = New-Object 'System.Windows.Forms.StatusBar'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$ButtonJour_CheckedChanged={
	
		$BoxCredit.Enabled = $false
		$BoxJour.Enabled = $true
		$ButtonCredit.Checked = $false
		$ButtonAccessC1.Checked = $false
		$ButtonAccessL1.Checked = $false
		$TextBoxCredit.Text = $null
	}
	
	$ButtonCredit_CheckedChanged={
	
		$BoxCredit.Enabled = $true
		$BoxJour.Enabled = $false
		$ButtonJour.Checked = $false
		$ButtonAccessC2.Checked = $false
		$ButtonAccessL2.Checked = $false
	
	}
	
	$ButtonValidate_Click={
		
		# Initialisation Clé registre SetVPN
		If ((Test-Path "HKCU:\Software\SetVPN") -eq $False){
		    CreateKey -KeyPath "HKCU:\Software\" -KeyName SetVPN
		    $Statusbar.Text = "Statut : Création HKCU:\Software\SetVPN - OK"
				
		    If ((Test-Path "HKCU:\Software\SetVPN")-eq $False){
		        $Statusbar.Text = "Statut : Erreur initialisation clé registre SetVPN"
			}
			Else {
		       	$Statusbar.Text = "Statut : Initialisation clé registre SetVPN - OK"    
		   	}
		}
		
		Write-Host "NewUser Value 1 : $NewUser"
		If ($NewUser -eq $true){
			CreateUserDir -User $User
			$KeyPath = "HKCU:\Software\SetVPN\$User"
			If ((Test-Path $KeyPath)-eq $False){
				$Statusbar.Text = "Statut : Erreur création de la clef de registre $User"
			    Break
			}
			Else {
				$Statusbar.Text =  "Statut : Création $User - OK"
			}
		}
		Else {
			$Statusbar.Text = "Statut : Avertissement l'utilisateur existe déjà, les paramètres seront écrasés"
			$KeyPath = "HKCU:\Software\SetVPN\$User"
			sleep 5
		}
		
		# Par Crédit
		if ($ButtonCredit.Checked -eq $true){
			
			if ($TextBoxCredit.Text -match "\d"){
				
				$Statusbar.Text = "Statut : En cours d'execution.."
				$Credit = $($TextBoxCredit.Text)
				
				if ($ButtonAccessC1.Checked -eq $true){
					$AccessType = 2
				}	
				elseif ($ButtonAccessL1.Checked -eq $true){
					$AccessType = 1
				}
				else {
					$Statusbar.Text = "Statut : Erreur veuillez indiquer le type d'accès VPN"
				}
				
				# Crédite jours
		        ModifyKey -KeyPath $KeyPath -KeyName "TimeSet" -KeyValue $Credit
		        ModifyKey -KeyPath $KeyPath -KeyName "Days" -KeyValue "none"
		        ModifyKey -KeyPath $KeyPath -KeyName "Access" -KeyValue 1
		        ModifyKey -KeyPath $KeyPath -KeyName "InitDate" -KeyValue $(Get-Date -Format dd/MM/yyyy)
		        ModifyKey -KeyPath $KeyPath -KeyName "VpnType" -KeyValue $AccessType
				
				$ControlUserForm.Visible = $false
				Call-EndForm_pff
				
			}
			else {
				$Statusbar.Text = "Statut : Erreur aucune valeur dans les jours à créditer"
			}
		}
		# Par Jour
		elseif ($ButtonJour.Checked -eq $true) {
			
			if (($CheckLun.Checked -eq $true) -or ($CheckMar.Checked -eq $true) -or ($CheckMer.Checked -eq $true) -or ($CheckJeu.Checked -eq $true) -or ($CheckVen.Checked -eq $true)){
				
				$Statusbar.Text = "Statut : En cours d'execution.."			
				
				# Récupère les jours cochés
				$Days = Get-Days
				
				if ($ButtonAccessC2.Checked -eq $true){
					$AccessType = 2
				}
				elseif ($ButtonAccessL2.Checked -eq $true) {
					$AccessType = 1
				}
				else {
					$Statusbar.Text = "Statut : Erreur veuillez indiquer le type d'accès VPN"
				}
				# Crédite jours
	       		ModifyKey -KeyPath $KeyPath -KeyName "InitDate" -KeyValue -1
	        	ModifyKey -KeyPath $KeyPath -KeyName "TimeSet" -KeyValue 0
	        	ModifyKey -KeyPath $KeyPath -KeyName "Days" -KeyValue $Days
	        	ModifyKey -KeyPath $KeyPath -KeyName "Access" -KeyValue 1
	        	ModifyKey -KeyPath $KeyPath -KeyName "VpnType" -KeyValue $AccessType
				
				$ControlUserForm.Visible = $false
				Call-EndForm_pff
				
			}
			else {
				$Statusbar.Text = "Statut : Erreur aucun jour sélectionné"	
			}
		}
		else {
			$Statusbar.Text = "Statut : Erreur veuillez choisir entre 'Par crédit' ou 'Par jour'"
		}
	}
	
	$ButtonMenu_Click={
		$ControlUserForm.Visible = $false
		Call-MenuForm_pff
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$ControlUserForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ControlUserForm_ButtonJour = $ButtonJour.Checked
		$script:ControlUserForm_CheckMar = $CheckMar.Checked
		$script:ControlUserForm_CheckMer = $CheckMer.Checked
		$script:ControlUserForm_CheckJeu = $CheckJeu.Checked
		$script:ControlUserForm_CheckVen = $CheckVen.Checked
		$script:ControlUserForm_CheckLun = $CheckLun.Checked
		$script:ControlUserForm_ButtonAccessC2 = $ButtonAccessC2.Checked
		$script:ControlUserForm_ButtonAccessL2 = $ButtonAccessL2.Checked
		$script:ControlUserForm_ButtonAccessC1 = $ButtonAccessC1.Checked
		$script:ControlUserForm_ButtonAccessL1 = $ButtonAccessL1.Checked
		$script:ControlUserForm_TextBoxCredit = $TextBoxCredit.Text
		$script:ControlUserForm_ButtonCredit = $ButtonCredit.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$ButtonJour.remove_CheckedChanged($ButtonJour_CheckedChanged)
			$ButtonCredit.remove_CheckedChanged($ButtonCredit_CheckedChanged)
			$ButtonValidate.remove_Click($ButtonValidate_Click)
			$ButtonMenu.remove_Click($ButtonMenu_Click)
			$ControlUserForm.remove_Load($Form_StateCorrection_Load)
			$ControlUserForm.remove_Closing($Form_StoreValues_Closing)
			$ControlUserForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# ControlUserForm
	#
	$ControlUserForm.Controls.Add($ButtonJour)
	$ControlUserForm.Controls.Add($BoxJour)
	$ControlUserForm.Controls.Add($BoxCredit)
	$ControlUserForm.Controls.Add($ButtonCredit)
	$ControlUserForm.Controls.Add($LabelAbout)
	$ControlUserForm.Controls.Add($ButtonValidate)
	$ControlUserForm.Controls.Add($ButtonMenu)
	$ControlUserForm.Controls.Add($LabelTitle)
	$ControlUserForm.Controls.Add($Statusbar)
	$ControlUserForm.ClientSize = '956, 497'
	$ControlUserForm.Name = "ControlUserForm"
	$ControlUserForm.StartPosition = 'CenterScreen'
	$ControlUserForm.Text = "Control User Form"
	#
	# ButtonJour
	#
	$ButtonJour.Location = '503, 167'
	$ButtonJour.Name = "ButtonJour"
	$ButtonJour.Size = '104, 24'
	$ButtonJour.TabIndex = 24
	$ButtonJour.Text = "Par jour"
	$ButtonJour.UseVisualStyleBackColor = $True
	$ButtonJour.add_CheckedChanged($ButtonJour_CheckedChanged)
	#
	# BoxJour
	#
	$BoxJour.Controls.Add($CheckMar)
	$BoxJour.Controls.Add($CheckMer)
	$BoxJour.Controls.Add($CheckJeu)
	$BoxJour.Controls.Add($CheckVen)
	$BoxJour.Controls.Add($CheckLun)
	$BoxJour.Controls.Add($LabelFieldJour)
	$BoxJour.Controls.Add($ButtonAccessC2)
	$BoxJour.Controls.Add($ButtonAccessL2)
	$BoxJour.Controls.Add($LabelFieldVpnType2)
	$BoxJour.Location = '503, 214'
	$BoxJour.Name = "BoxJour"
	$BoxJour.Size = '414, 201'
	$BoxJour.TabIndex = 23
	$BoxJour.TabStop = $False
	$BoxJour.Text = "Jour"
	#
	# CheckMar
	#
	$CheckMar.Location = '129, 71'
	$CheckMar.Name = "CheckMar"
	$CheckMar.Size = '48, 24'
	$CheckMar.TabIndex = 13
	$CheckMar.Text = "Mar"
	$CheckMar.UseVisualStyleBackColor = $True
	#
	# CheckMer
	#
	$CheckMer.Location = '183, 71'
	$CheckMer.Name = "CheckMer"
	$CheckMer.Size = '48, 24'
	$CheckMer.TabIndex = 12
	$CheckMer.Text = "Mer"
	$CheckMer.UseVisualStyleBackColor = $True
	#
	# CheckJeu
	#
	$CheckJeu.Location = '237, 71'
	$CheckJeu.Name = "CheckJeu"
	$CheckJeu.Size = '48, 24'
	$CheckJeu.TabIndex = 11
	$CheckJeu.Text = "Jeu"
	$CheckJeu.UseVisualStyleBackColor = $True
	#
	# CheckVen
	#
	$CheckVen.Location = '291, 71'
	$CheckVen.Name = "CheckVen"
	$CheckVen.Size = '48, 24'
	$CheckVen.TabIndex = 10
	$CheckVen.Text = "Ven"
	$CheckVen.UseVisualStyleBackColor = $True
	#
	# CheckLun
	#
	$CheckLun.Location = '75, 71'
	$CheckLun.Name = "CheckLun"
	$CheckLun.Size = '48, 24'
	$CheckLun.TabIndex = 9
	$CheckLun.Text = "Lun"
	$CheckLun.UseVisualStyleBackColor = $True
	#
	# LabelFieldJour
	#
	$LabelFieldJour.Location = '53, 45'
	$LabelFieldJour.Name = "LabelFieldJour"
	$LabelFieldJour.Size = '305, 23'
	$LabelFieldJour.TabIndex = 8
	$LabelFieldJour.Text = "Choix des jours à créditer :"
	#
	# ButtonAccessC2
	#
	$ButtonAccessC2.Location = '254, 138'
	$ButtonAccessC2.Name = "ButtonAccessC2"
	$ButtonAccessC2.Size = '104, 24'
	$ButtonAccessC2.TabIndex = 7
	$ButtonAccessC2.Text = "Accès Complet"
	$ButtonAccessC2.UseVisualStyleBackColor = $True
	#
	# ButtonAccessL2
	#
	$ButtonAccessL2.Location = '254, 107'
	$ButtonAccessL2.Name = "ButtonAccessL2"
	$ButtonAccessL2.Size = '104, 24'
	$ButtonAccessL2.TabIndex = 6
	$ButtonAccessL2.Text = "Accès Limité"
	$ButtonAccessL2.UseVisualStyleBackColor = $True
	#
	# LabelFieldVpnType2
	#
	$LabelFieldVpnType2.Location = '53, 107'
	$LabelFieldVpnType2.Name = "LabelFieldVpnType2"
	$LabelFieldVpnType2.Size = '163, 23'
	$LabelFieldVpnType2.TabIndex = 5
	$LabelFieldVpnType2.Text = "Type d'accès VPN :"
	#
	# BoxCredit
	#
	$BoxCredit.Controls.Add($ButtonAccessC1)
	$BoxCredit.Controls.Add($ButtonAccessL1)
	$BoxCredit.Controls.Add($TextBoxCredit)
	$BoxCredit.Controls.Add($LabelFieldVpnType1)
	$BoxCredit.Controls.Add($LabelFieldCredit)
	$BoxCredit.Location = '37, 214'
	$BoxCredit.Name = "BoxCredit"
	$BoxCredit.Size = '425, 201'
	$BoxCredit.TabIndex = 22
	$BoxCredit.TabStop = $False
	$BoxCredit.Text = "Crédit"
	#
	# ButtonAccessC1
	#
	$ButtonAccessC1.Location = '246, 138'
	$ButtonAccessC1.Name = "ButtonAccessC1"
	$ButtonAccessC1.Size = '104, 24'
	$ButtonAccessC1.TabIndex = 4
	$ButtonAccessC1.Text = "Accès Complet"
	$ButtonAccessC1.UseVisualStyleBackColor = $True
	#
	# ButtonAccessL1
	#
	$ButtonAccessL1.Location = '246, 107'
	$ButtonAccessL1.Name = "ButtonAccessL1"
	$ButtonAccessL1.Size = '104, 24'
	$ButtonAccessL1.TabIndex = 3
	$ButtonAccessL1.Text = "Accès Limité"
	$ButtonAccessL1.UseVisualStyleBackColor = $True
	#
	# TextBoxCredit
	#
	$TextBoxCredit.Location = '246, 45'
	$TextBoxCredit.Name = "TextBoxCredit"
	$TextBoxCredit.Size = '129, 20'
	$TextBoxCredit.TabIndex = 2
	#
	# LabelFieldVpnType1
	#
	$LabelFieldVpnType1.Location = '45, 107'
	$LabelFieldVpnType1.Name = "LabelFieldVpnType1"
	$LabelFieldVpnType1.Size = '177, 23'
	$LabelFieldVpnType1.TabIndex = 1
	$LabelFieldVpnType1.Text = "Type d'accès VPN :"
	#
	# LabelFieldCredit
	#
	$LabelFieldCredit.Location = '45, 48'
	$LabelFieldCredit.Name = "LabelFieldCredit"
	$LabelFieldCredit.Size = '177, 23'
	$LabelFieldCredit.TabIndex = 0
	$LabelFieldCredit.Text = "Nombre de jour a créditer :"
	#
	# ButtonCredit
	#
	$ButtonCredit.Location = '37, 167'
	$ButtonCredit.Name = "ButtonCredit"
	$ButtonCredit.Size = '104, 24'
	$ButtonCredit.TabIndex = 21
	$ButtonCredit.Text = "Par crédit"
	$ButtonCredit.UseVisualStyleBackColor = $True
	$ButtonCredit.add_CheckedChanged($ButtonCredit_CheckedChanged)
	#
	# LabelAbout
	#
	$LabelAbout.Location = '37, 119'
	$LabelAbout.Name = "LabelAbout"
	$LabelAbout.Size = '516, 23'
	$LabelAbout.TabIndex = 20
	$LabelAbout.Text = "Ajouter ou Modifier un utilisateur pour permettre de controler l'accès au VPN"
	#
	# ButtonValidate
	#
	$ButtonValidate.Location = '842, 432'
	$ButtonValidate.Name = "ButtonValidate"
	$ButtonValidate.Size = '75, 23'
	$ButtonValidate.TabIndex = 19
	$ButtonValidate.Text = "Valider"
	$ButtonValidate.UseVisualStyleBackColor = $True
	$ButtonValidate.add_Click($ButtonValidate_Click)
	#
	# ButtonMenu
	#
	$ButtonMenu.Location = '37, 432'
	$ButtonMenu.Name = "ButtonMenu"
	$ButtonMenu.Size = '75, 23'
	$ButtonMenu.TabIndex = 18
	$ButtonMenu.Text = "Menu"
	$ButtonMenu.UseVisualStyleBackColor = $True
	$ButtonMenu.add_Click($ButtonMenu_Click)
	#
	# LabelTitle
	#
	$LabelTitle.Font = "Microsoft Sans Serif, 16pt, style=Bold"
	$LabelTitle.Location = '37, 42'
	$LabelTitle.Name = "LabelTitle"
	$LabelTitle.Size = '222, 28'
	$LabelTitle.TabIndex = 17
	$LabelTitle.Text = "VPN User Control"
	#
	# Statusbar
	#
	$Statusbar.Location = '0, 475'
	$Statusbar.Name = "Statusbar"
	$Statusbar.Size = '956, 22'
	$Statusbar.TabIndex = 0
	$Statusbar.Text = "Statut : En Attente.."
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $ControlUserForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$ControlUserForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$ControlUserForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$ControlUserForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $ControlUserForm.ShowDialog()

}
#endregion Source: ControlUserForm.pff

#region Source: EndForm.pff
function Call-EndForm_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
0hsAAB+LCAAAAAAABADNWdtu4zYQfS/QfxCEPrq2ZcW3hWMgcZIi2CR1IzfdhwALWholbCjSoKgk
KvpB7Xfsj5XUxZYtO6aSdW0ECKzRDOdwzhE5BAe34LJn4PEZEmj44w+GMfiV4wdMEbnABG5QAMNz
6l0wHtRnvj9olN4mMerpDniIGR1a9dagUTSko07/BFcYIp7BsenEoYCg/gemHnsJ62r09H/NWPeq
ZmRDHR/Vm+qvZowiIiIOxxQiwRGpGeNoSrD7GeIJewJ6PO12Udttd6y+fQTNXt80qAR7bKrx5HxM
w33ExOPS0xwxKjgjoZkAlVDHnM2AizgLOXFdmInTSAhGcx/pdQs+yHgXMrfU4bcIC9No5EM18rE2
jD0iGKhw8F9gDlu9o5rR6rS2Bqk5nDLuAXdETGTkBX4F7wwjwh62Bl+jVxzIfKfsVQYiEsL2EEyr
hihlSN+02Fu9HYG4GLMQC6xKPJIlkXNzOQDdGjuBV2EOb7/966IZFhFBAvvloPNnOWYWccWQl2FT
1q/qedBIfufu28V6haZAdq7WJMvd+GYigbwl2XJZrpiL0mr22jXD6nZLNdlEWjGnRlCqXavdl9q1
NfwnaHpJPZBK0oGUsvsmJLkkJWwdJHeXFAu5sn6MvPZRNfLypDtlr1ONvY2YDpq+CQ7AAfEh9myr
GntZzp2S165G3iZIB83dGYrDDxHX7FUjTiXcKWs6y0CBtbV4Dpoy1WmFHyKtp6PsAmdpxp2ypuW9
YG0DosPmbcqiiovkhfQwh9fY5SxkvjAcREPDAY59+eVZM53lb8G8ZdeMqstsglmf+H6vMvHlRn4T
8WPEUfDtH8EhNGYs4sZPv4fAjU/fQQXpqWTnMkjTXAON3vv1Kg5bLf02dZFRm8SeVZlDHVGlHGoi
kcTe4TBCJDm6nSL3acQI4+ZwwqO1DVvx5CJPi+5TcepfE8vK4eWwNZIekKto5IS6j6pCp0zGBzXj
Fj88Vlwf+t33iEtB1RZXt11ZXE1tcSkk8kj8v+pL5dyqr+WHkzCEQGoBwtw3s8TDTFvXiKIHCORo
9ZNIspkQtNCYrasx25r6dq/dQZ7dOQJb7vrzTKuZg9BlnODpd1DyG1l29O38Pfp0n415P98s6zfn
k/sLuWXAC+NP989qdLtpW/37tZ+3R8h24GccvWD68B7ITdtv+13fsrx2E9nofZCz/Fpg91ZXvUoi
gfaGUCXXg/klIHtD+eX6SrOWmMvFhfFYdobPWDbG+9PnKhK9CYwYh72VWSXXg5lNSu4O6vCxtyIv
w1gDff6YbzGDsdzh5I7C85n9AhQkwML+mDrMryrSLWytNTNeutmdxZLrslXuY9iHUIw4JFuYahRL
trn3KArlXpe/L4y96cWYIOHLxXv4s2pA84fF1UNEncmJ6h+yX4tA9gLceQRC8ssX1ZKUjPlOvlyt
gQNuxLHsJeb3F8sBpYueRB3ly568MfEiV5ScV+yr/qtErbOeQehyPFsucmOtdcSCGaLxcHLuTGS9
s6fC61nMVT9ZJKVsu1QXEhSRFXDrzWtvyLLOaeMriSxY9FgpjKJl0Fi6TWsUdC9VULzD+w85ZRZ3
0hsAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$FormEnd = New-Object 'System.Windows.Forms.Form'
	$LabelVPNType = New-Object 'System.Windows.Forms.Label'
	$LabelInitDate = New-Object 'System.Windows.Forms.Label'
	$LabelTimeSet = New-Object 'System.Windows.Forms.Label'
	$LabelDays = New-Object 'System.Windows.Forms.Label'
	$LabelAccess = New-Object 'System.Windows.Forms.Label'
	$LabelAbout = New-Object 'System.Windows.Forms.Label'
	$ButtonMenu = New-Object 'System.Windows.Forms.Button'
	$ButtonQuit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$FormEvent_Load={
		# Lire Clée Utilisateur
	    $UserKey = ReadKey -Key $KeyPath
		
		$LabelAccess.Text = "Access`t : $($UserKey.Access)"
		$LabelDays.Text = "Days`t : $($UserKey.Days)"
		$LabelInitDate.Text = "InitDate : $($UserKey.InitDate)"
		$LabelTimeSet.Text = "TimeSet`t : $($UserKey.TimeSet)"
		$LabelVPNType.Text = "VpnType  : $($UserKey.VpnType)"
		
	}
	
	$ButtonMenu_Click={
	
		$FormEnd.Visible = $false
		Call-MenuForm_pff
	}
	
	$ButtonQuit_Click={
		$FormEnd.Close()
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$FormEnd.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$ButtonMenu.remove_Click($ButtonMenu_Click)
			$ButtonQuit.remove_Click($ButtonQuit_Click)
			$FormEnd.remove_Load($FormEvent_Load)
			$FormEnd.remove_Load($Form_StateCorrection_Load)
			$FormEnd.remove_Closing($Form_StoreValues_Closing)
			$FormEnd.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# FormEnd
	#
	$FormEnd.Controls.Add($LabelVPNType)
	$FormEnd.Controls.Add($LabelInitDate)
	$FormEnd.Controls.Add($LabelTimeSet)
	$FormEnd.Controls.Add($LabelDays)
	$FormEnd.Controls.Add($LabelAccess)
	$FormEnd.Controls.Add($LabelAbout)
	$FormEnd.Controls.Add($ButtonMenu)
	$FormEnd.Controls.Add($ButtonQuit)
	$FormEnd.AcceptButton = $ButtonQuit
	$FormEnd.ClientSize = '284, 262'
	$FormEnd.FormBorderStyle = 'FixedDialog'
	$FormEnd.MaximizeBox = $False
	$FormEnd.MinimizeBox = $False
	$FormEnd.Name = "FormEnd"
	$FormEnd.StartPosition = 'CenterScreen'
	$FormEnd.Text = "Récapitulatif"
	$FormEnd.add_Load($FormEvent_Load)
	#
	# LabelVPNType
	#
	$LabelVPNType.Location = '85, 177'
	$LabelVPNType.Name = "LabelVPNType"
	$LabelVPNType.Size = '159, 23'
	$LabelVPNType.TabIndex = 7
	$LabelVPNType.Text = "LabelVPNType"
	#
	# LabelInitDate
	#
	$LabelInitDate.Location = '85, 154'
	$LabelInitDate.Name = "LabelInitDate"
	$LabelInitDate.Size = '159, 23'
	$LabelInitDate.TabIndex = 6
	$LabelInitDate.Text = "LabelInitDate"
	#
	# LabelTimeSet
	#
	$LabelTimeSet.Location = '85, 131'
	$LabelTimeSet.Name = "LabelTimeSet"
	$LabelTimeSet.Size = '159, 23'
	$LabelTimeSet.TabIndex = 5
	$LabelTimeSet.Text = "LabelTimeSet"
	#
	# LabelDays
	#
	$LabelDays.Location = '85, 108'
	$LabelDays.Name = "LabelDays"
	$LabelDays.Size = '159, 23'
	$LabelDays.TabIndex = 4
	$LabelDays.Text = "LabelDays"
	#
	# LabelAccess
	#
	$LabelAccess.Location = '85, 85'
	$LabelAccess.Name = "LabelAccess"
	$LabelAccess.Size = '159, 23'
	$LabelAccess.TabIndex = 3
	$LabelAccess.Text = "LabelAccess"
	#
	# LabelAbout
	#
	$LabelAbout.Font = "Microsoft Sans Serif, 11pt"
	$LabelAbout.Location = '13, 31'
	$LabelAbout.Name = "LabelAbout"
	$LabelAbout.Size = '198, 23'
	$LabelAbout.TabIndex = 2
	$LabelAbout.Text = "Paramètres pour $User :"
	#
	# ButtonMenu
	#
	$ButtonMenu.Location = '13, 227'
	$ButtonMenu.Name = "ButtonMenu"
	$ButtonMenu.Size = '81, 23'
	$ButtonMenu.TabIndex = 1
	$ButtonMenu.Text = "Menu"
	$ButtonMenu.UseVisualStyleBackColor = $True
	$ButtonMenu.add_Click($ButtonMenu_Click)
	#
	# ButtonQuit
	#
	$ButtonQuit.Anchor = 'Bottom, Right'
	$ButtonQuit.Location = '197, 227'
	$ButtonQuit.Name = "ButtonQuit"
	$ButtonQuit.Size = '75, 23'
	$ButtonQuit.TabIndex = 0
	$ButtonQuit.Text = "Quitter"
	$ButtonQuit.UseVisualStyleBackColor = $True
	$ButtonQuit.add_Click($ButtonQuit_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $FormEnd.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$FormEnd.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$FormEnd.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$FormEnd.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $FormEnd.ShowDialog()

}
#endregion Source: EndForm.pff

#Hide Shell
$showWindowAsync = Add-Type –memberDefinition @” 
[DllImport("user32.dll")] 
public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow); 
“@ -name “Win32ShowWindowAsync” -namespace Win32Functions –passThru
 
function Show-PowerShell() { 
     [void]$showWindowAsync::ShowWindowAsync((Get-Process –id $pid).MainWindowHandle, 10) 
}
 
function Hide-PowerShell() { 
    [void]$showWindowAsync::ShowWindowAsync((Get-Process –id $pid).MainWindowHandle, 2) 
}
 
Hide-PowerShell

#Start the application
Main ($CommandLine)
